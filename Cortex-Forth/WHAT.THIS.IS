Mon Aug  5 00:03:34 UTC 2019

was: Tue Jul 30 11:35:41 UTC 2019

was: was: Thu Jun  6 19:14:05 UTC 2019

NOTE for August 5th, 2019:

The current wiring diagram will be described here,
verbally. ;)

TX and RX are crossed, and are straight DC interconnects
(no resistors or port pin protection diodes are used).
GND and GND are interconnected now (as there are no
protection diodes, and TX and RX need this common
reference).

Trinket M0 plays the role of the outside-world connection
(it talks to the host PC though its regular USB connection).

Trinket M0 talks to ItsyBitsyM4 via the TX/RX pair (UART).

3v (Trinket M0) is connected to 3v (ItsyBitsyM4).

/RST (ItsyBitsyM4) is connected to the high side os SPST
PB switch.  GND to the other terminal of that switch.

At no time is there a USB connector connected to both
targets (Trinket M0, ItsyBitsyM4).

When ItsyBitsyM4 firmware is to be updated, remove first,
the USB connection to Trinket M0.  Then connect ItsyBitsyM4
to USB (to the host PC) for regular use with the Arduino IDE.

The reset PB switch is provided only for ItsyBitsyM4, on
the assumption that Trinket M0's firmware will rarely be
updated (it's running a simple pass-through terminal
program, with just a tiny bit of smarts, to avoid need
of a 'special' telecom program of any particular design).

The real point of a two-target project is to design out
differences from one implementation to another, by use
of this intermediary (Trinket M0) target board, to do
the talking between the Forth machine (ItsyBitsyM4) and
the real world <tm>.

May be more simple for the individual user to omit the
Trinket M0 (entirely) and change all refs to 'Serial1.foo'
back to 'Serial.foo' and be done with it. ;)

End, 05 August 2019 NOTE. ;)


   * * *


NOTE for July 30th:  It's been long enough since the
last time this project was worked on, to immediately
notice the disparity between what this file states,
and the 'working' truth. ;)

The current project does not work with CP2104; but
rather, it talks to a second microcontroller (Trinket M0)
running a simple terminal emulation.

The CP2104 thing would probably work, somewhat. ;)

What follows is the earlier contents of this very file.
Have not read through it to see what obtains on July 30th
and what is now obsoleted. ;)

 * * *

This is a variant that talks via TX/RX pair, to
CP2104 (PiUART) rather than via /dev/ttyACM0.

Device: /dev/ttyUSB0 at 9600 (baud rate should
be arbitrary .. perhaps).

Project works well, and simply - very small change
was made in just a few minutes.

Existing hardware setup for another project was
leveraged (CP2104 and Feather M0 Express - there
is also a Segger JLink EDU hookup handy).

Setup note:

Feather M0 Express is powered by its USB connector,
by a battery (the kind with USB-A connector for
supplying power to a cell phone or similar).

There was no real port pin protection for TX/RX
pair.

The host PC supplies the CP2104 (which has been
neutered by removing a foil trace jumper, to prevent
'backfeeding' of power from it to the DUT).

At no time were two USB cables running to external
computing devices of any sort - just the one USB
cable running back to the PC from CP2104.

TX and RX should have inline 10k resistors, and there
should be 1N914B's connected (reverse-biased) across
the local power supplies for both ends of the connection,
with TX and RX locate at the junction of two diodes.

There should be no shared ground between the two
devices (just TX and RX).  This last bit (no shared
ground) needs careful examination for correctness,
but it is taken as being correct for the case of two
microcontrollers conversing over the TX/RX pair.
